<?xml version="1.0"?>
<ruleset name="Loadsys">
	<description>Loadsys coding standard</description>

	<exclude-pattern>\.git</exclude-pattern>
	<exclude-pattern>*/config/*.ini.php</exclude-pattern>
	<exclude-pattern>/*/tmp/</exclude-pattern>

	<!-- Include most CakePHP rules (and PSR-2/PSR-1, by extension). -->
	<rule ref="CakePHP">
		<!-- Disable enforcing opening class brace on same line -->
		<exclude name="PSR2.Classes.ClassDeclaration.OpenBraceNewLine"/>
		<exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine" />

		<!-- Disable enforcing leading underscores for protected/private methods. -->
		<exclude name="Squiz.NamingConventions.ValidFunctionName.PrivateNoUnderscore"/>
		<exclude name="PEAR.NamingConventions.ValidFunctionName.PrivateNoUnderscore"/>
		<!-- Disable enforcing no leading underscores for public methods (we have our own). -->
		<exclude name="CakePHP.NamingConventions.ValidFunctionName.PublicWithUnderscore"/>

		<!-- Disable enforcing spaces for indenting. -->
		<exclude name="Generic.WhiteSpace.DisallowTabIndent"/>

		<!-- Disable enforcing opening function brace on a new line. -->
		<exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine"/>

		<!-- Disable Cake core's enforcement of no private methods. -->
		<exclude name="CakePHP.NamingConventions.ValidFunctionName.PrivateMethodInCore"/>

		<!-- Exclude PEAR style control structures like `if (...)\n{\n` -->
		<exclude name="PEAR.ControlStructures.ControlSignature"/>

		<!--
		DON'T exclude either the generic comma-spacing sniff (because it
		provides fixers) or Cake's (since it captures more).
		-->
		<!--
		<exclude name="Generic.Functions.FunctionCallArgumentSpacing.SpaceBeforeComma"/>
		<exclude name="CakePHP.WhiteSpace.CommaSpacing"/>
		-->
	</rule>

	<!--
	Reduce the severity of TO DO marker warnings to allow them to be more
	easily suppressed during normal developer runs, but still included in
	Travis builds (via coordination with the `codesniffer-run` script from
	the CakePHP-Shell-Scripts project and manipulation of the
	`- -warning-severity=n` command line option.)
	-->
	<rule ref="Generic.Commenting.Todo.CommentFound">
		<severity>3</severity>
	</rule>
	<rule ref="Generic.Commenting.Todo.TaskFound">
		<severity>3</severity>
	</rule>

	<!--
	Enforce "the opposite" of the disabled PSR-2/CakePHP rules above. In
	other words; it's not enough to DISable the enforcement of spaces for
	indenting, we must also ENable enforcement of tabs for indenting.
	-->
	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>
	<rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie"/>
	<!-- Loadsys.NamingConventions.ValidClassBrackets.InvalidBracketPlacement -->

	<!--
	Make using underscores in private and protected variable names a
	warning (that can then be suppressed) for compatibility with Entity
	classes that require this.
	-->
	<rule ref="Loadsys.NamingConventions.ValidPrivateProtectedVariableName.PublicHasUnderscore">
		<type>warning</type>
	</rule>

	<rule ref="Loadsys.NamingConventions.ValidPrivateProtectedVariableName.ProtectedUnderscore">
		<type>warning</type>

		<!--
		Entity classes MUST define override methods that do not follow
		camelCasing so don't make those "errors" at all.
		-->
		<exclude-pattern>src/Model/Entity/*</exclude-pattern>
	</rule>

	<rule ref="Loadsys.NamingConventions.ValidPrivateProtectedVariableName.PrivateWithUnderscore">
		<type>warning</type>
	</rule>

	<!--
	Make using underscores in private and protected class method names a
	warning (that can then be suppressed) for compatibility with Entity
	classes that require this.
	-->
	<rule ref="Loadsys.NamingConventions.ValidPrivateProtectedFunctionName.PublicWithUnderscore">
		<type>warning</type>
	</rule>

	<rule ref="Loadsys.NamingConventions.ValidPrivateProtectedFunctionName.ProtectedWithUnderscore">
		<type>warning</type>

		<!--
		Entity classes MUST define override properties that do not follow
		camelCasing so don't make those "errors" at all.
		-->
		<exclude-pattern>src/Model/Entity/*</exclude-pattern>

		<!--
		Form classes MUST used underscored method names.
		-->
		<exclude-pattern>src/Form/*</exclude-pattern>
	</rule>

	<rule ref="Loadsys.NamingConventions.ValidPrivateProtectedFunctionName.PrivateWithUnderscore">
		<type>warning</type>
	</rule>

	<!--
	Phinx migration and seeds files define classes, but can not be namespaced
	(otherwise Phinx can't construct them by guessing the class name from
	the filename.)
	Ref: https://github.com/robmorgan/phinx/blob/695ce926c402e4c75ec76ec0a11e027824ff05ea/src/Phinx/Migration/Manager.php#L403
    So relax the namespacing rules on the config/Migrations and config/Seeds folder.
	-->
	<rule ref="PSR1.Classes.ClassDeclaration.MissingNamespace">
		<exclude-pattern>*/config/Migrations/*</exclude-pattern>
		<exclude-pattern>*/config/Seeds/*</exclude-pattern>
	</rule>


	<!-- Ensure file starts with `<?php` -->
	<rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>

	<!-- There MUST NOT be trailing whitespace at the end of non-blank lines.
	 Blank lines must not have whitespace at all. -->
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
		<properties>
			<property name="ignoreBlankLines" value="false"/>
		</properties>
	</rule>


	<!--
	Pull in additional rules not previously covered by parent rulesets
	(or explicitly excluded by them).
	-->
	<rule ref="Generic.Commenting.Fixme"/>
	<rule ref="Generic.Metrics.NestingLevel"/>
	<rule ref="Generic.NamingConventions.ConstructorName"/>
	<rule ref="Generic.Strings.UnnecessaryStringConcat"/>
	<rule ref="MySource.PHP.EvalObjectFactory"/>
	<rule ref="PEAR.ControlStructures.MultiLineCondition"/>
	<rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
	<rule ref="Squiz.PHP.DisallowObEndFlush"/>
	<rule ref="Squiz.PHP.Eval"/>
	<rule ref="Squiz.PHP.LowercasePHPFunctions"/>
	<rule ref="Squiz.WhiteSpace.ControlStructureSpacing"/>
	<rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>

	<!-- All rules in ./Sniffs are included automatically -->
</ruleset>
