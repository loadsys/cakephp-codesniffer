<?xml version="1.0"?>
<ruleset name="Loadsys">
	<description>Loadsys coding standard</description>

	<exclude-pattern>\.git</exclude-pattern>
	<exclude-pattern>*/config/*.ini.php</exclude-pattern>
	<exclude-pattern>/*/tmp/</exclude-pattern>

	<!-- Include most PSR-2 (and PSR-1 by extension) rules. -->
	<rule ref="PSR2">
		<!-- Disable enforcing opening class brace on same line -->
		<exclude name="PSR2.Classes.ClassDeclaration.OpenBraceNewLine"/>
		<exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine" />

		<!-- Disable enforcing spaces for indenting. -->
		<exclude name="Generic.WhiteSpace.DisallowTabIndent"/>
	</rule>

	<!-- Include most CakePHP rules. -->
	<rule ref="CakePHP">
		<!-- Disable enforcing opening function brace on a new line. -->
		<exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine"/>

		<!-- Disable Cake core's enforcement of no private methods. -->
		<exclude name="CakePHP.NamingConventions.ValidFunctionName.PrivateMethodInCore"/>

		<!-- Exclude PEAR style control structures like `if (...)\n{\n` -->
		<exclude name="PEAR.ControlStructures.ControlSignature"/>
	</rule>

	<!--
	Enforce "the opposite" of the disabled CakePHP rules above. In other words; it's
	not enough to DISable the enforcement of spaces for indenting, we must
	also ENable enforcement of tabs for indenting.
	-->
	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>
	<rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie"/>


	<!-- Make using underscores in private and protected variable names a warning (that can then be suppressed). -->
	<rule ref="Loadsys.NamingConventions.ValidPrivateProtectedVariableName">
		<type>warning</type>
	</rule>

	<!-- Make using underscores in private and protected variable names a warning (that can then be suppressed). -->
	<rule ref="Loadsys.NamingConventions.ValidPrivateProtectedFunctionName">
		<type>warning</type>
	</rule>

	<!-- Ensure file starts with <?php -->
	<rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>

	<!-- All PHP files MUST use the Unix LF (linefeed) line ending. -->
	<rule ref="Generic.Files.LineEndings">
		<properties>
			<property name="eolChar" value="\n"/>
		</properties>
	</rule>

	<!-- There MUST NOT be trailing whitespace at the end of non-blank lines.
	 Blank lines must not have whitespace at all. -->
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
		<properties>
			<property name="ignoreBlankLines" value="false"/>
		</properties>
	</rule>

 	<!-- Relax some src/* and tests/* rules -->
	<rule ref="PSR1.Files.SideEffects">
		<exclude-pattern>*/tests/*</exclude-pattern>
	</rule>
	<rule ref="PSR1.Classes.ClassDeclaration">
		<exclude-pattern>*/tests/*</exclude-pattern>
	</rule>
	<rule ref="PSR1.Methods.CamelCapsMethodName">
		<exclude-pattern>*/tests/*</exclude-pattern>
	</rule>
	<rule ref="PEAR.NamingConventions.ValidClassName">
		<exclude-pattern>*/tests/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Classes.ValidClassName">
		<exclude-pattern>*/tests/*</exclude-pattern>
	</rule>
	<rule ref="CakePHP.Commenting.FunctionComment">
		<exclude-pattern>*/tests/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.NamingConventions.ValidFunctionName">
		<exclude-pattern>*/src/*</exclude-pattern>
		<exclude-pattern>*/tests/*</exclude-pattern>
	</rule>
	<rule ref="Generic.NamingConventions.CamelCapsFunctionName">
		<exclude-pattern>*/src/*</exclude-pattern>
		<exclude-pattern>*/tests/*</exclude-pattern>
	</rule>
	<rule ref="PEAR.NamingConventions.ValidFunctionName">
		<exclude-pattern>*/src/*</exclude-pattern>
		<exclude-pattern>*/tests/*</exclude-pattern>
	</rule>



<!--
	<rule ref="Generic.Arrays.DisallowLongArraySyntax" />
	<rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
	<rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
	<rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
	<rule ref="Generic.Commenting.Fixme"/>
	<rule ref="Generic.Commenting.Todo"/>
	<rule ref="Generic.Formatting.DisallowMultipleStatements"/>
	<rule ref="Generic.Formatting.NoSpaceAfterCast"/>
	<rule ref="Generic.Metrics.NestingLevel"/>
	<rule ref="Generic.NamingConventions.CamelCapsFunctionName"/>
	<rule ref="Generic.NamingConventions.ConstructorName"/>
	<rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
	<rule ref="Generic.PHP.DeprecatedFunctions"/>
	<rule ref="Generic.PHP.ForbiddenFunctions"/>
	<rule ref="Generic.PHP.LowerCaseConstant"/>
	<rule ref="Generic.PHP.NoSilencedErrors"/>
	<rule ref="Generic.Strings.UnnecessaryStringConcat"/>
	<rule ref="MySource.PHP.EvalObjectFactory"/>
	<rule ref="PEAR.ControlStructures.ControlSignature"/>
	<rule ref="PEAR.ControlStructures.MultiLineCondition"/>
	<rule ref="PEAR.NamingConventions.ValidClassName"/>
	<rule ref="PEAR.NamingConventions.ValidFunctionName"/>
	<rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
	<rule ref="Squiz.Classes.LowercaseClassKeywords"/>
	<rule ref="Squiz.Commenting.DocCommentAlignment"/>
	<rule ref="Squiz.Operators.ValidLogicalOperators"/>
	<rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
	<rule ref="Squiz.PHP.DisallowObEndFlush"/>
	<rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
	<rule ref="Squiz.PHP.Eval"/>
	<rule ref="Squiz.PHP.LowercasePHPFunctions"/>
	<rule ref="Squiz.PHP.NonExecutableCode"/>
	<rule ref="Squiz.Scope.MemberVarScope"/>
	<rule ref="Squiz.Scope.MethodScope"/>
	<rule ref="Squiz.Scope.StaticThisUsage"/>
	<rule ref="Squiz.WhiteSpace.CastSpacing"/>
	<rule ref="Squiz.WhiteSpace.ControlStructureSpacing"/>
	<rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>
	<rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
	<rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
	<rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
-->

	<!-- All rules in ./Sniffs are included automatically -->
</ruleset>
